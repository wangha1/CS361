My kwic from assignment1 has a nice performance on basic part (don't have any parameters like periodsToBreaks or listPairs), which runs entire ulysses.txt at 1.33s. But on the other hand, is has a really suck performance with listPairs on, so my fastkwic focus on list pairs.
In my old version kwic, my algorithm is when you detect listPairs is on, then copy a list of lines into LP function. On the LP function, I first strip all the punctuation and split into words, then list all the possible combinations and save it in a array, then sort the each pairs in that array(require go through all the elements on the array), then use count() method to count how many times a element(which is the pairs) present in the array, then append all elements that present more than 2 times and do some formating and finally return the all the pairs that should be listed. As you can see, the algorithm are pretty straight forward but either time or usage wasted. In the ulysses's case, which has 1.5 million words, the list of all possible combination of words comes to over 10 million long. I never actually runs all program in this version but in my estimates, every single iteration takes about 1s to finish(count function actually go through all your array), so it might finish in someday 2017.
After I figure out how slow my old algorithm is, I come up with a new one. So I do the copy and strip punctuation and cases in a for loop, then send the lines without punctuations into LP function, then I inspired by Alex's program which use a dictionary to save the pairs and how many time it appears and didn't save all possiable pairs into another array, then at the end of my LP function, do some formating and return the correct format of list pairs. That's really both time and usage saving, which only takes about 30min to finish entire ulysses. But it is still slow for me. After I check the CPU state, I found out I just use about 30% of my CPU, so I think I can add one more thread on it, runs at same time, each thread deal with half of the lines and merge together. But I still have some issue on implementation of this when I writing this report, I will try to figure that out before deadline. 
